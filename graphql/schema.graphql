scalar Date
scalar DateTime
scalar JSON

type BankAccount {
  balance: Float!
  id: ID
  name: String
  mask: String
  subtype: String
  type: String
}

type Consumer {
  id: ID
  name: ConsumerName
  currentAddresses: [ConsumerAddress]
  previousAddresses: [ConsumerAddress]
  identification: ConsumerIdentification
  contact: ConsumerContact
}

type ConsumerName {
  firstName: String
  lastName: String
}

type ConsumerAddress {
  streetAddress: String
  city: String
  state: String
  zipCode: String
}

type ConsumerIdentification {
  ssn: String
  dob: String
}

type ConsumerContact {
  emailAddress: String
  homePhone: String
  mobile: String
}

type InstaTouchIdHandshake {
  sessionId: String!
  instaTouch: String!
  carrier: String
}

type OtpPasscode {
  sessionId: String!
  transactionKey: String!
}

type Query {
  getDocumentById(id: ID): String
  getInstaTouchIdSession: InstaTouchIdHandshake
  getOneView: String
  getPlaidLinkToken(id: ID): String
  getTouchIdOtpPasscode(sessionId: String!, mobileNumber: String!): OtpPasscode
  getUserData: String
  helloWorld: String
  sandbox(sql: String!, params: JSON): Boolean
}

type Mutation {
  addBankAccountsViaPlaid(plaidId: ID, plaidObj: JSON): [BankAccount]
  completeInstaTouchIdMobile(
    sessionId: String!
    zipCode: String!
    SSN: String!
  ): Consumer
  completeInstaTouchIdOtp(
    mobileNumber: String!
    passcode: String!
    sessionId: String!
    transactionKey: String!
    zipCode: String!
    SSN: String!
  ): Consumer

  createDatabase(
    users: Boolean!
    equifax: Boolean!
    stripe: Boolean!
    plaid: Boolean!
  ): Boolean

  createParcelUser(id: String!, email: String!): Boolean
  deleteParcelUser(id: String!): Boolean

  helloWorldMutate: String
}
